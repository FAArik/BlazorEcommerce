@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>

@if (CartProducts == null || CartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in CartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br/>
                    <button class="btn-delete" @onclick="@(() => 
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">@product.Price</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@CartProducts.Count): $@CartProducts.Sum(product=>@product.Price)
        </div>
    </div>
}

@code {
    List<CartProductResponse> CartProducts = null;
    string message = "Loading cart...";
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }
    private async Task RemoveProductFromCart(int productId,int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }
    private async Task LoadCart()
    {
        if ((await CartService.GetCartItems()).Count == 0)
        {
            message = "Your cart is empty.";
            CartProducts = new List<CartProductResponse>();

        }
        else
        {
            CartProducts = await CartService.GetCartProducts();
        }
    }
}
